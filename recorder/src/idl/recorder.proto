syntax = "proto2";
package recording;

message RecorderInfo {
  required string ip = 1;
  required string hostname = 2;
  required string app_id = 3;
  required string instance_grp = 4;
  required string cluster = 5;
  required string instance_id = 6;
  required string proc_name = 7;
  required string vm_id = 8;
  required string zone = 9;
  required string instance_type = 10;
  required string local_time = 11;
  required uint32 recorder_version = 12;
  required uint32 recorder_uptime = 13;
  required uint64 recorder_tick = 14;
  required RecorderCapabilities capabilities = 15;
}

message RecorderCapabilities {
  optional bool can_cpu_sample = 1 [default = false];
  optional bool can_trace_elapsed_time = 2 [default = false];
  optional bool can_trace_offcpu_time = 3 [default = false];
  optional bool can_trace_alloc = 4 [default = false];
  optional bool can_trace_io = 5 [default = false];
  optional bool can_trace_monitor = 6 [default = false];
  optional bool can_instrument_java = 7 [default = false];
};

message AssignedBackend {
  required string host = 1;
  required uint32 port = 2;
}

message PollReq {
  required RecorderInfo recorder_info = 1;
  required WorkResponse work_last_issued = 2;
}

message PollRes {
  required string local_time = 1;
  optional WorkAssignment assignment = 2;
  required uint32 controller_id = 4;
  required uint32 controller_version = 5;
}

message WorkResponse {
  required uint64 work_id = 1;
  enum WorkState {
    pre_start = 0;
    running = 1;
    complete = 2;
  }
  required WorkState work_state = 2;
  enum WorkResult {
    unknown = 0;
    success = 1;
    failure = 2;
  }
  required WorkResult work_result = 3;
  required uint32 elapsed_time = 4;
}

message WorkAssignment {
  required uint64 work_id = 1;
  repeated Work work = 2;
  required string description = 3;
  required string issue_time = 4; //controller local time
  required uint32 duration = 5; //seconds, how long to collect data
  required uint32 delay = 6; //seconds, how long to wait before start
}

enum WorkType {
  cpu_sample_work = 0;
  thread_sample_work = 1;
  monitor_contention_work = 2;
  monitor_wait_work = 3;
  io_trace_work = 4;
}

message Work {
  required WorkType w_type = 1;
  optional CpuSampleWork cpu_sample = 2;
  optional IOTraceWork io_trace = 3;
  optional ThreadSampleWork thd_sample = 4;
  optional MonitorContentionWork monitor_block = 5;
  optional MonitorWaitWork monitor_wait = 6;
}

message RecordingHeader {
  required uint32 recorder_version = 1;
  required uint32 controller_version = 2;
  required uint32 controller_id = 3;
  required WorkAssignment work_assignment = 4;
}

/* entry */
message Wse {
  optional IndexedData indexed_data = 1;
  required WorkType w_type = 2;
  optional StackSampleWse cpu_sample_entry = 3;
  optional StackSampleWse thread_sample_entry = 4;
  optional MonitorReportWse monitor_contention_entry = 5;
  optional MonitorReportWse monitor_wait_entry = 6;
  optional IOTraceWse io_trace_entry = 7;
}

/* indexed data, incrementally sent  */
message IndexedData {
  repeated TraceContext trace_ctx = 1;
  repeated MethodInfo method_info = 2;
  repeated ThreadInfo thread_info = 3;
  repeated MonitorInfo monitor_info = 4;
  repeated FDInfo fd_info = 5;
}

message TraceContext {
  required uint32 trace_id = 1;
  required string trace_name = 2;
  required bool is_generated = 3;
  optional uint32 coverage_pct = 4;
  enum MergeSemantics {
    parent = 0;
    scoped = 1;
    scoped_strict = 2;
    stack = 3;
    duplicate = 4;
  }
  optional MergeSemantics merge = 5;
}

message MethodInfo {
  required int64 method_id = 1; //this is int64 for backward compatibility (it should be uint32), as we were earlier passing jMethodId un-translated
  required string file_name = 2;
  required string class_fqdn = 3;
  required string method_name = 4;
  required string signature = 5;
  enum CodeClass {
    cls_java                = 0;
    cls_native              = 1;
    // jruby, clojure etc can all go here
  }
  optional CodeClass c_cls = 6 [default = cls_java];
}

message ThreadInfo {
  required int64 thread_id = 1;
  required string thread_name = 2;
  required int32 priority = 3;
  required bool is_daemon = 4;
  required int64 tid = 5;
}

message MonitorInfo {
  required uint64 obj_id = 1;
  required string obj_str = 2;
}

/* core work data */

message CpuSampleWork {
  required uint32 frequency = 1;
  required uint32 max_frames = 2;
  optional uint32 serialization_flush_threshold = 3 [default = 100];
}

message ThreadSampleWork {
  required uint32 frequency = 1;
  required uint32 max_frames = 2;
}

message StackSampleWse {
  repeated StackSample stack_sample = 1;
}

message StackSample {
  required uint32 start_offset_micros = 1;
  optional int64 thread_id = 2;
  repeated Frame frame = 3;
  repeated uint32 trace_id = 4;
  required bool snipped = 5;
  enum Error {
    ticks_no_Java_frame         = 0;
    ticks_no_class_load         = 1;
    ticks_GC_active             = 2;
    ticks_unknown_not_Java      = 3;
    ticks_not_walkable_not_Java = 4;
    ticks_unknown_Java          = 5;
    ticks_not_walkable_Java     = 6;
    ticks_unknown_state         = 7;
    ticks_thread_exit           = 8;
    ticks_deopt                 = 9;
    ticks_safepoint             = 10;
    fkp_no_error                = 100;
    fkp_no_jni_env              = 101;
  } // TODO: write me a test (to bijectively match BacktraceError)
  optional Error error = 6;
}

message Frame {
  required int64 method_id = 1;
  required int32 bci = 2;
  required int32 line_no = 3;
}

// File/socket IO

message IOTraceWork {
  required uint32 max_frames = 1;
  required uint32 latency_threshold_ms = 2;
  optional uint32 serialization_flush_threshold = 3 [default = 100];
}

enum FDType {
  file = 0;
  filenio = 1;
  socket = 2;
  socketnio = 3;
}

message FileInfo {
  required string filename = 1;
  optional string flags = 2;
}

message SocketInfo {
  required string address = 1;                  // ip:port
  required bool connect = 2;                    // to distinguish between accept/connect
  optional bool blocking = 3 [default = true];
}

message FDInfo {
  required uint32 id = 1;
  required int64 fd = 2;
  required FDType fd_type = 3;
  optional FileInfo file_info = 4;
  optional SocketInfo socket_info = 5;
}

message IOTraceWse {
  repeated IOTrace traces = 1;
}

message IOTrace {
  required IOTraceType type = 1;
  required uint32 fd_id = 2;
  required uint64 ts = 3;
  required uint64 latency_ns = 4;
  optional FdRead read = 5;
  optional FdWrite write = 6;
  optional StackSample stack = 7;
}

enum IOTraceType {
  file_read = 1;
  file_write = 2;
  socket_read = 3;
  socket_write = 4;
  select = 5;
}

message FdRead {
  required uint32 count = 1;
  optional bool timeout = 2 [default = false];
}

message FdWrite {
  required uint32 count = 1;
}

// Monitor

message MonitorContentionWork {
  required uint32 max_monitors = 1;
  required uint32 max_frames = 2;
}

message MonitorWaitWork {
  required uint32 max_monitors = 1;
  required uint32 max_frames = 2;
}

message MonitorReportWse {
  repeated MonitorTrace sample = 1;
}

message MonitorTrace {
  required StackSample stack = 1;
  required uint64 obj_id = 2;
  required uint64 delay_ns = 3;
}

message ProcessGroup {
  required string app_id = 1;
  required string cluster = 2;
  required string proc_name = 3;
}

message ProcessGroups {
  repeated ProcessGroup processGroup = 1;
}

message BackendAssociation {
  required AssignedBackend backend = 1;
  repeated ProcessGroup processGroups = 2;
}

message BackendAssociations {
  repeated BackendAssociation associations = 1;
}