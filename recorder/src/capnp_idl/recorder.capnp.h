// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: recorder.capnp

#ifndef CAPNP_INCLUDED_b8c7ea0e25cb2b20_
#define CAPNP_INCLUDED_b8c7ea0e25cb2b20_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e4a77ea73683687d);
CAPNP_DECLARE_SCHEMA(cbd8b924e210eb56);

}  // namespace schemas
}  // namespace capnp


struct StackSample {
  StackSample() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4a77ea73683687d, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Frame {
  Frame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbd8b924e210eb56, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class StackSample::Reader {
public:
  typedef StackSample Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getStartOffsetMicros() const;

  inline  ::int64_t getThreadId() const;

  inline bool hasFrames() const;
  inline  ::capnp::List< ::Frame>::Reader getFrames() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StackSample::Builder {
public:
  typedef StackSample Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getStartOffsetMicros();
  inline void setStartOffsetMicros( ::uint32_t value);

  inline  ::int64_t getThreadId();
  inline void setThreadId( ::int64_t value);

  inline bool hasFrames();
  inline  ::capnp::List< ::Frame>::Builder getFrames();
  inline void setFrames( ::capnp::List< ::Frame>::Reader value);
  inline  ::capnp::List< ::Frame>::Builder initFrames(unsigned int size);
  inline void adoptFrames(::capnp::Orphan< ::capnp::List< ::Frame>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Frame>> disownFrames();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StackSample::Pipeline {
public:
  typedef StackSample Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Frame::Reader {
public:
  typedef Frame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getMethodId() const;

  inline  ::int32_t getBci() const;

  inline  ::int32_t getLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Frame::Builder {
public:
  typedef Frame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getMethodId();
  inline void setMethodId( ::int64_t value);

  inline  ::int32_t getBci();
  inline void setBci( ::int32_t value);

  inline  ::int32_t getLineNo();
  inline void setLineNo( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Frame::Pipeline {
public:
  typedef Frame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t StackSample::Reader::getStartOffsetMicros() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t StackSample::Builder::getStartOffsetMicros() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void StackSample::Builder::setStartOffsetMicros( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t StackSample::Reader::getThreadId() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t StackSample::Builder::getThreadId() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void StackSample::Builder::setThreadId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool StackSample::Reader::hasFrames() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StackSample::Builder::hasFrames() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Frame>::Reader StackSample::Reader::getFrames() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Frame>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Frame>::Builder StackSample::Builder::getFrames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Frame>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StackSample::Builder::setFrames( ::capnp::List< ::Frame>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Frame>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Frame>::Builder StackSample::Builder::initFrames(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Frame>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void StackSample::Builder::adoptFrames(
    ::capnp::Orphan< ::capnp::List< ::Frame>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Frame>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Frame>> StackSample::Builder::disownFrames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Frame>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t Frame::Reader::getMethodId() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t Frame::Builder::getMethodId() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Frame::Builder::setMethodId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Frame::Reader::getBci() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t Frame::Builder::getBci() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Frame::Builder::setBci( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Frame::Reader::getLineNo() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t Frame::Builder::getLineNo() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Frame::Builder::setLineNo( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_b8c7ea0e25cb2b20_
